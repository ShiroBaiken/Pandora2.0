from __future__ import annotations

from uuid import uuid4

from aiogram import types
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData


class LikesCallback(CallbackData):
    """Aiogram's Callback data generator"""
    emoji: str
    action: str
    count: str
    bd_id: str


likes_callbacks = LikesCallback('likes', 'action', 'count', 'bd_id')


class LikeKeyboard:
    likes = {
        'ðŸ’š': 'like',
        'ðŸ‘Ž': 'dislike',
        'ðŸ’“': 'like',
        'ðŸ‘Œ': 'fine',
        'ðŸ˜°': 'disgust'

    }

    @staticmethod
    def mimic_button(key: str):
        """Returns InlineKeyboardButton object without callback data"""
        return types.InlineKeyboardButton(text=key)

    def create_button_with_id(self, key: str, bd: str) -> types.InlineKeyboardButton | list:
        """Returns InlineKeyboardButton object with preset order of callback data and defaul value of 'count' in it.
        Callback data starts with given key, ends with given bd_id."""
        return types.InlineKeyboardButton(text=key,
                                          callback_data=likes_callbacks.new(action=self.likes[key], count=0, bd_id=bd))

    def create_new_markup_with_three_reactions(self, bd_id: str):
        """Generates InlineKeyboard object with preset order and text of butons from emojis list inside function.
        Callback data in InlineKeyboard object will be ended with given bd_id."""
        emojis = ['ðŸ’“', 'ðŸ‘Œ', 'ðŸ˜°']
        buttons = [self.create_button_with_id(x, bd_id) for x in emojis]
        inline_keyboard = InlineKeyboardMarkup(row_width=3)
        inline_keyboard.row(*buttons)
        return inline_keyboard

    def create_new_markup_with_two_reactions(self, bd_id: str):
        """Generates InlineKeyboard object with preset order and text of butons from emojis list inside function.
        Callback data in InlineKeyboard object will be ended with given bd_id."""
        emojis = ['ðŸ’š', 'ðŸ‘Ž']
        buttons = [self.create_button_with_id(x, bd_id) for x in emojis]
        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        inline_keyboard.row(*buttons)
        return inline_keyboard

    @staticmethod
    def add_repost_button(preset_keyboard: InlineKeyboardMarkup, keyboard_type: int):
        """Inserts into given InlineKeyboardMarkup "Post" button with
        a unique identifier generated by uuid4() in last row.
        The switch_inline_query parameter is including the generated identifier and the given keyboard_type parameter,
        representing which of preseted keyboards with emojis should be added to message further"""
        new_id = uuid4().hex
        repost_button = types.InlineKeyboardButton(text='Post',
                                                   switch_inline_query=f'menu:repost:{new_id}:{keyboard_type}')
        preset_keyboard.row(repost_button)
        return preset_keyboard
